# Generated by Django 3.1.7 on 2021-04-25 12:52

import datetime
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('digest', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='DisciplineProgram',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_doc', models.FileField(blank=True, help_text='загрузить файл', null=True, upload_to='FileDoc/%Y/%m/%d/', verbose_name='Положение')),
                ('kod_event', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='digest.kodevent', verbose_name='Код дисциплины')),
            ],
            options={
                'verbose_name': 'Дисциплина в мероприятии',
                'verbose_name_plural': 'Дисциплины в мероприятии',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('draft', models.BooleanField(default=True, verbose_name='Черновик')),
                ('name', models.CharField(help_text='название события', max_length=100, verbose_name='Название')),
                ('short_description', models.CharField(blank=True, help_text='краткое описание (анонс 300симв)', max_length=300, null=True, verbose_name='Текст')),
                ('start_date', models.DateField(default=datetime.datetime.today, verbose_name='Начало события')),
                ('final_date', models.DateField(verbose_name='Окончание события')),
                ('url', models.URLField(blank=True, null=True, verbose_name='Сторонняя ссылка на событие')),
                ('region', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='digest.city', verbose_name='Город(район)')),
                ('vid', models.ForeignKey(help_text='ориентирование,трейл...', on_delete=django.db.models.deletion.CASCADE, to='digest.vidsporta', verbose_name='Вид события')),
            ],
            options={
                'verbose_name': 'Событие',
                'verbose_name_plural': 'События',
            },
        ),
        migrations.CreateModel(
            name='RelayRace',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('check_razr', models.BooleanField(default=True, verbose_name='Разряды')),
                ('check_command', models.BooleanField(default=False, verbose_name='Командные очки')),
                ('check_ball', models.BooleanField(default=False, verbose_name='Баллы')),
                ('limit', models.PositiveSmallIntegerField(default=2, verbose_name='лимит участников в группе')),
                ('discipline_program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='event.disciplineprogram', verbose_name='Программа мероприятия')),
                ('groups', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digest.group', verbose_name='Группа')),
            ],
            options={
                'verbose_name': 'Группа для эстафеты',
                'verbose_name_plural': 'Группы для эстафеты',
            },
        ),
        migrations.CreateModel(
            name='ProgramEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(verbose_name='Дата мероприятия')),
                ('name', models.CharField(blank=True, help_text='судейская, соревнование, экскурсия...', max_length=80, null=True, verbose_name='Название')),
                ('limit_total', models.PositiveSmallIntegerField(default=0, verbose_name='Общий лимит')),
                ('check_event', models.BooleanField(default=False, verbose_name='Соревнование')),
                ('program_doc', models.FileField(blank=True, null=True, upload_to='FileDoc/%Y/%m/%d/', verbose_name='Файл информации')),
                ('program_text', models.TextField(blank=True, null=True, verbose_name='Текст')),
                ('events', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='program_event', to='event.event', verbose_name='Название мероприятия')),
                ('location', models.ForeignKey(help_text='локация мероприятия', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='location', to='digest.location', verbose_name='Место(район)')),
            ],
            options={
                'verbose_name': 'Программа',
                'verbose_name_plural': 'Программы',
                'ordering': ['date'],
            },
        ),
        migrations.AddField(
            model_name='disciplineprogram',
            name='program',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='discipline_program', to='event.programevent', verbose_name='Программа мероприятия'),
        ),
        migrations.AddField(
            model_name='disciplineprogram',
            name='status',
            field=models.ForeignKey(help_text='городские, региональные...', null=True, on_delete=django.db.models.deletion.SET_NULL, to='digest.statusevent', verbose_name='Статус'),
        ),
        migrations.CreateModel(
            name='CrossGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('check_razr', models.BooleanField(default=True, verbose_name='Разряды')),
                ('check_command', models.BooleanField(default=False, verbose_name='Командные очки')),
                ('check_ball', models.BooleanField(default=False, verbose_name='Баллы')),
                ('discipline_program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='event.disciplineprogram', verbose_name='Программа мероприятия')),
                ('groups', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digest.group', verbose_name='Группа')),
            ],
            options={
                'verbose_name': 'Группа',
                'verbose_name_plural': 'Группы',
            },
        ),
    ]
